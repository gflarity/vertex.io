h1. sechash

h4. Secure password hashing with salt and key stretching

Author: James Brumond
Version: 0.1.2

Copyright 2011 James Brumond
Dual licensed under MIT and GPL

h2. Install

<pre><code>npm install sechash</code></pre>

h2. Usage

h3. Running a simple hash

<pre><code>var sechash = require('sechash');

// This will do a simple md5 hash, the same as if you used the
// built-in "crypto" module.
var hash = sechash.basicHash('md5', 'Your String');

// You can also use the testBasicHash method to easily test if
// a string matches a hash
sechash.testBasicHash('md5', 'Your String', hash); // true</code></pre>

h3. Using the strong stuff

<pre><code>var sechash = require('sechash');

// This will hash the string quite a bit more strongly. It adds
// a salt parameter and an iterations parameter to make the hash
// harder to break.
var hash1 = sechash.strongHashSync('md5', 'Your String', 'Salt', 2500);

// If no salt value is given, it will randomly generate salt for
// you; similarly, if no iteration count is given, it will default
// to 2000.
var hash2 = sechash.strongHashSync('md5', 'Your String');

// Because this function can take so long to run, it has an asynchronous
// option as well, which is very similar...
sechash.strongHash('md5', 'Your String', function(err, hash3) {
    console.log(hash3);
});</code></pre>

h3. Testing a hash

<pre><code>var sechash = require('sechash');

// First we generate a hash...
var hash = sechash.strongHashSync('md5', 'Your String', 'Salt', 2500);

// To test if a string matches a hash, we you the testHash method
sechash.testHashSync('Your String', hash);    // true
sechash.testHashSync('Another String', hash); // false

// Again, this function also has an async form...
sechash.testHash('Your String', hash, function(err, match) {
    console.log(match); // true
});</code></pre>

