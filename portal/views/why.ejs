<div class="tabber">

     <div class="tabbertab">
		<!--<img src='devices.png'>-->
		<h2></h2>
		<br/>
		<h1>Too Many Devices, Too Many Platforms.</h1>
		<br/>
		<h3>Android, iOS, Windows Phone 7, Mac OS X, Windows, iPhone, iPad, ...</h3>
		<br/>	
			
		<p>This is the world we live in. The number of different platforms and mobile devices
		continues to grow. It's becoming incredibly expensive to target multiple mobile platforms
		with a unified user experience using native development frameworks.</p>

        <p>Fortunately, an open standards based solution is emerging. HTML5 and JavaScript is allowing developers
		to create beautiful user experiences that span modern devices. These technologies greatly reduce complexity and costs associated with 
        mobile development, but there are still a number of challenges limiting it's adoption. At Vertex.IO we address these challenges head on.<p>
     </div>

     <div class="tabbertab">
		<h2></h2>
		<br/>
		<h1>Backend Infrastructure is Hard to Get Right</h1>
		<h3>Yet Another Language? Java, Python, Ruby, C++...</h3>
		
		<p>The pieces your customers don't see are critically important.  With other platform providers 
        you need to design, implement and maintain your own data services. These skills are orthogonal to the expertise you'll require 
        to create rich mobile JavaScript/HTML5 client, yet you need both.</p>
    </div>
        
     <div class="tabbertab">
    	<h2></h2>
		<br/>
        <h1>How will you scale?</h1>
        <h3>Scaling Requires Yet More Expertise</h3>
        <p>Scaling to support your popularity will require significant
		expertise and investment. Knowing when to make this investment seems to require a crystal ball<!-- better anology? -->. Most platform services
        require that you predict and pay for the resources you require ahead of time.</p>
               
</div>

	<div class="tabbertab">
		<h2></h2>
		<br/>
		<h1>Offline Synchronization</h1>
		<h3>Customers Expect Your App To Keep Working, No Matter Where They Go. </h3>
        <p>Your customer's expect to keep working when they enter the subway or fly on airplane. They expect what they have entered to be 
waiting for them on their next device. They expect seamless synchronization
        with the cloud.
		</p>
	</div>

    <!--
     <div class="tabbertab">
	  	<h2></h2>
		<br/>
		<h1>We want to solve these problems for you.</h1>
		
     </div>

	<div class="tabbertab">
		<h2></h2>
		
		
		<h1>Heroku</h1>
		Heroku is an online Ruby on Rails cloud Plaform as a Service
		offering. Customers pre-pay for the database instances and webservers they expect to require. This in
		stark contrast to Vertex.IO customers who only pay for the resources they actually
		use. Heroku customers must monitor their own web service usage in order to predict their future needs.
		Vertex.IO's data services scale dynamically and transparently using credit a based system which rolls
		over each month.

		Heroku's customers must design, write and main their own web services. Vertex.IO customer's focus entirely
		on client side offline capable HTMl5 applications, the part their customer's see. With Vertex.IO, cloud synchronozition
		happens transparently while the user's are online. 


		<h1>Google App Engine</h1>

		App Engine is an online Python/Java Platform as a Service offering. Like Vertex.IO, customer's pay only 
		for what they use. Unlike Vertex.IO, customer's are expected to design, write and maintain 
		their own backend web services. App Engine customer client's often use Google's Web Toolkit to
		cross compile Java client applications into HTML5 applications. Unlike Vertex.IO, App Engine customer's
		must implement their own offline HTML5 client synchronization technologies. 

		<h1>Amazon Elastic Beanstalk</h1>

		Elastic Beanstalk is an online Java Infrastructure as a Service offering feature deployment tools which 
		make it seam closer to a Platform as a Service offering such as Heroku. Unlike Vertex.IO customers, 
		Elastic Beanstalk customers are expected to predict their resource requirements in advance.  They are
		also required to design and maintain their own backend web services while implementing their own offline 
		client synchronization technologies.

		<h1>Windows Azure</h1>

		Windows Azure is an online Windows Infrastructure as a Service offering which features deployment
		.Net/PHP deployment tools which  make it seam closer to a Platform as a Service offering such as Heroku. 
		Unlike Vertex.IO customers,  Azure customers are expected to predict their resource requirements in advance. They are
		also required to design and maintain their own backend web services while implementing their own offline 
		client synchronization technologies.

		<h1>Joyent Cloud & No.de</h1>

		JoyentCloud/No.de is an online Open Solaris Infrastructure as a Service offering which features Node.JS deployment
		tools which make it closer to a Platform as a Service offering such as Heroku. Unlike Vertex.IO customers,  Azure customers
		are expected to predict their resource requirements in advance. They are also required to design and maintain their 
		own backend web services while implementing their own offline client synchronization technologies.
	</div>

     <div class="tabbertab">
	  <p>The Technology</p>
	  <p>Tab 3 content.</p>
     </div>-->

</div>
